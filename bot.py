import time
import threading
import requests
import telebot
import json
import os
import re
from datetime import datetime, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = 'TOKEN_BOT_TG'
AUTH_URL = "https://api.redgifs.com/v2/auth/temporary"
TRENDING_URL = "https://api.redgifs.com/v2/feeds/trending/popular"
USER_VIDEOS_URL = "https://api.redgifs.com/v2/users/{}/search"
TOKEN_FILE = 'token.txt'
SUBS_FILE = 'subscriptions.txt'
SENT_LINKS_FILE = 'sent_links.txt'
STATE_FILE = 'state.json'
SENT_LINKS_LIMIT = 1000  # –õ–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–º—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
for f in [TOKEN_FILE, SUBS_FILE, SENT_LINKS_FILE, STATE_FILE]:
    if not os.path.exists(f):
        open(f, 'w').close()


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def read_file(filename):
    try:
        with open(filename, 'r') as f:
            return [line.strip() for line in f.readlines() if line.strip()]
    except:
        return []


def append_to_file(filename, data):
    with open(filename, 'a') as f:
        f.write(data + '\n')


def write_file(filename, data):
    with open(filename, 'w') as f:
        if isinstance(data, (list, set)):
            f.write('\n'.join(data))
        else:
            f.write(str(data))


def clean_old_links():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    links = read_file(SENT_LINKS_FILE)
    if len(links) > SENT_LINKS_LIMIT:
        write_file(SENT_LINKS_FILE, links[-SENT_LINKS_LIMIT:])
        return set(read_file(SENT_LINKS_FILE))
    return set(links)


# –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
def get_state(user_id=None):
    try:
        with open(STATE_FILE, 'r') as f:
            states = json.load(f)
            return states.get(str(user_id), {}) if user_id else states
    except:
        return {}


def update_state(user_id, new_state):
    try:
        states = get_state()
        states[str(user_id)] = new_state
        with open(STATE_FILE, 'w') as f:
            json.dump(states, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")


def clear_state(user_id):
    update_state(user_id, {})


# –ö–ª–∞—Å—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class Cache:
    def __init__(self):
        self.subs = set()
        self.sent_links = set()
        self.token = None
        self.token_expiry = None
        self.load_initial_data()

    def load_initial_data(self):
        self.subs = set(read_file(SUBS_FILE))
        self.sent_links = set(read_file(SENT_LINKS_FILE))

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            with open(TOKEN_FILE, 'r') as f:
                data = f.read().split('|')
                if len(data) == 2:
                    self.token = data[0]
                    self.token_expiry = datetime.fromisoformat(data[1])
        except:
            pass


cache = Cache()


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def read_file(filename):
    try:
        with open(filename, 'r') as f:
            return [line.strip() for line in f.readlines() if line.strip()]
    except:
        return []


def append_to_file(filename, data):
    with open(filename, 'a') as f:
        f.write(data + '\n')


def write_file(filename, data):
    with open(filename, 'w') as f:
        if isinstance(data, (list, set)):
            f.write('\n'.join(data))
        else:
            f.write(str(data))


def clean_old_links():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    links = read_file(SENT_LINKS_FILE)
    if len(links) > SENT_LINKS_LIMIT:
        write_file(SENT_LINKS_FILE, links[-SENT_LINKS_LIMIT:])
        cache.sent_links = set(read_file(SENT_LINKS_FILE))


# –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
def get_state(user_id=None):
    try:
        with open(STATE_FILE, 'r') as f:
            states = json.load(f)
            return states.get(str(user_id), {}) if user_id else states
    except:
        return {}


def update_state(user_id, new_state):
    try:
        states = get_state()
        states[str(user_id)] = new_state
        with open(STATE_FILE, 'w') as f:
            json.dump(states, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")


def clear_state(user_id):
    update_state(user_id, {})


# –¢–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
def get_or_refresh_token():
    now = datetime.now()
    if cache.token and cache.token_expiry and cache.token_expiry > now:
        return cache.token

    print("–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...")
    try:
        response = requests.get(AUTH_URL)
        response.raise_for_status()
        data = response.json()

        cache.token = data['token']
        cache.token_expiry = now + timedelta(hours=1)

        with open(TOKEN_FILE, 'w') as f:
            f.write(f"{cache.token}|{cache.token_expiry.isoformat()}")

        return cache.token
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        raise


# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
def send_video(chat_id, video_url, username):
    if not video_url or video_url in cache.sent_links:
        return False

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = get_state(chat_id)
        if not state.get('active', False):
            return False

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
        markup = InlineKeyboardMarkup()
        sub_text = "üíî –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if username in cache.subs else "‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        markup.add(InlineKeyboardButton(sub_text, callback_data=f"sub_{username}"))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        escaped_username = re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', username)
        message = f'–í–∏–¥–µ–æ –æ—Ç [{escaped_username}](https://www.redgifs.com/users/{username})'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        bot.send_video(
            chat_id,
            video_url,
            caption=message,
            parse_mode='MarkdownV2',
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –∏ —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        cache.sent_links.add(video_url)
        append_to_file(SENT_LINKS_FILE, video_url)
        clean_old_links()

        time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ {video_url}: {e}")
        return False


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ
def get_videos(url, headers, params=None):
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json().get('gifs', [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        return []


# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
def fetch_and_send():
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            token = get_or_refresh_token()
            headers = {
                "accept": "application/json",
                "authorization": f"Bearer {token}",
                "referer": "https://www.redgifs.com/"
            }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            states = get_state() or {}  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
            for user_id, state in states.items():
                if not state:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    continue

                chat_id = int(user_id)
                current_state = state.get('active', False)

                if not current_state:
                    continue

                if state.get('mode') == 'trending':
                    videos = get_videos(TRENDING_URL, headers, {'page': 1, 'count': 100})
                    for video in videos:
                        if not get_state(chat_id).get('active', False):
                            break
                        if video and isinstance(video, dict):
                            if urls := video.get('urls'):
                                if video_url := urls.get('hd'):
                                    video_url = video_url.split('.mp4')[0] + '.mp4'
                                    send_video(chat_id, video_url, video.get('userName', 'unknown'))

                elif state.get('mode') == 'subscriptions':
                    for username in cache.subs:
                        if not get_state(chat_id).get('active', False):
                            break
                        url = USER_VIDEOS_URL.format(username)
                        videos = get_videos(url, headers, {'order': 'new', 'count': 100})
                        for video in videos:
                            if video and isinstance(video, dict):
                                if urls := video.get('urls'):
                                    if video_url := urls.get('hd'):
                                        video_url = video_url.split('.mp4')[0] + '.mp4'
                                        send_video(chat_id, video_url, username)

                elif state.get('mode') == 'user_video' and state.get('current_user'):
                    username = state['current_user']
                    url = USER_VIDEOS_URL.format(username)
                    videos = get_videos(url, headers, {'order': 'new', 'count': 100})
                    for video in videos:
                        if not get_state(chat_id).get('active', False):
                            break
                        if video and isinstance(video, dict):
                            if urls := video.get('urls'):
                                if video_url := urls.get('hd'):
                                    video_url = video_url.split('.mp4')[0] + '.mp4'
                                    send_video(chat_id, video_url, username)

            time.sleep(5)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {e}")
            time.sleep(10)


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start', 'help'])
def start(message):
    clear_state(message.chat.id)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üéâ –¢—Ä–µ–Ω–¥—ã', 'üíñ –î–ª—è –º–µ–Ω—è', 'üë§ –í–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n"
        "üéâ –¢—Ä–µ–Ω–¥—ã - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ\n"
        "üíñ –î–ª—è –º–µ–Ω—è - –≤–∏–¥–µ–æ –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "üë§ –í–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤–∏–¥–µ–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞",
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: m.text == 'üéâ –¢—Ä–µ–Ω–¥—ã')
def trending_mode(message):
    update_state(message.chat.id, {
        'mode': 'trending',
        'active': True,
        'current_user': None
    })
    markup = ReplyKeyboardMarkup(resize_keyboard=True).add('‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
    bot.send_message(message.chat.id, "–†–µ–∂–∏–º —Ç—Ä–µ–Ω–¥–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == 'üíñ –î–ª—è –º–µ–Ω—è')
def subs_mode(message):
    if not cache.subs:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    update_state(message.chat.id, {
        'mode': 'subscriptions',
        'active': True,
        'current_user': None
    })

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '‚úñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏')
    bot.send_message(message.chat.id, "–†–µ–∂–∏–º –ø–æ–¥–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == 'üë§ –í–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
def user_mode(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è RedGifs:")
    bot.register_next_step_handler(msg, process_username)


def process_username(message):
    username = message.text.strip().split('/')[-1].lower()
    if not username:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    update_state(message.chat.id, {
        'mode': 'user_video',
        'active': True,
        'current_user': username
    })

    markup = ReplyKeyboardMarkup(resize_keyboard=True).add('‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
    bot.send_message(
        message.chat.id,
        f"–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: m.text == '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
def stop_sending(message):
    clear_state(message.chat.id)
    start(message)


@bot.message_handler(func=lambda m: m.text == '‚úñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏')
def manage_subs(message):
    if not cache.subs:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for sub in sorted(cache.subs):
        markup.add(f"‚úñÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {sub}")
    markup.add('üîô –ù–∞–∑–∞–¥')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text.startswith('‚úñÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç '))
def unsubscribe(message):
    username = message.text.replace('‚úñÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç ', '').strip()
    if username in cache.subs:
        cache.subs.remove(username)
        write_file(SUBS_FILE, cache.subs)
        bot.send_message(message.chat.id, f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {username}.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    manage_subs(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('sub_'))
def handle_subscription(call):
    username = call.data.split('_', 1)[1]

    if username in cache.subs:
        cache.subs.remove(username)
        write_file(SUBS_FILE, cache.subs)
        bot.answer_callback_query(call.id, f"–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {username}!")
    else:
        cache.subs.add(username)
        append_to_file(SUBS_FILE, username)
        bot.answer_callback_query(call.id, f"–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {username}!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    markup = InlineKeyboardMarkup()
    sub_text = "üíî –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if username in cache.subs else "‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
    markup.add(InlineKeyboardButton(sub_text, callback_data=f"sub_{username}"))

    try:
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    clean_old_links()

    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
    threading.Thread(target=fetch_and_send, daemon=True).start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()